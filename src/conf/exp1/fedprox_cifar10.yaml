---
dataset: cifar10
num_clients: 1000 # total number of clients
num_epochs: 10 # number of local epochs
batch_size: 10
num_rounds: 100
clients_per_round: 10
stragglers_fraction: 0.5
learning_rate: 0.03
mu: 2.0 # it can be >= 0
seed: 0

client_resources:
  num_cpus: 2
  num_gpus: 0.0

server_device: cpu

dataset_config:
  iid: false
  balance: false
  power_law: true

federated_dataset_config:
  min_dataset_size: 10
  train_test_split: 0.8

model:
  _target_: src.models.Net
  num_classes: 10
  num_channels: 3

client_manager:
  _target_: src.ClientManager.OffloadClientManager
  scheduler: round_robin

agent:
  _target_: src.utils.BasicAgent
  n1: 0

fit_config:
  drop_client: false # with FedProx, clients shouldn't be dropped even if they are stragglers

strategy:
  _target_: flwr.server.strategy.FedProx
  fraction_fit: 0.00001 # because we want the number of clients to sample on each roudn to be solely defined by min_fit_clients
  fraction_evaluate: 0.0
  min_fit_clients: ${clients_per_round}
  min_evaluate_clients: 0
  min_available_clients: ${clients_per_round}
  evaluate_metrics_aggregation_fn:
    _target_: src.strategy.weighted_average
    _partial_: true # we don't want this function to be evaluated when instantiating the strategy, we treat it as a partial and evaluate it when the strategy actuallly calls the function (in aggregate_evaluate())
  proximal_mu: ${mu}
